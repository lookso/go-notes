syntax = "proto3";

package idcard;

service IDCard {
    // Ping 检查服务可用性.
    rpc Ping (PingRequest) returns (PingReply) {
    }
    // Verify 验证姓名和身份证号码是否匹配.
    // 如果请求参数校验不通过, 返回的错误码 code==3
    // 如果 appid 无效, 客户端不在白名单, 签名无效, 返回的错误码 code==7
    // 如果请求达到速率限制, 返回的错误码 code==10
    // 服务端出错, 返回的错误码 code==13
    rpc Verify (VerifyRequest) returns (VerifyReply) {
    }
    // QueryIDInfo 获取身份证信息.
    // 如果 key 不规范的格式, 返回的错误码 code==3
    // 如果 key 对应的信息没有被找到, 返回的错误码 code==5
    // 如果 appid 无效, 客户端不在白名单, 签名无效, 返回的错误码 code==7
    // 服务端出错, 返回的错误码 code==13
    rpc QueryIDInfo (QueryIDInfoRequest) returns (QueryIDInfoReply) {
    }
}

message PingRequest {
}

message PingReply {
}

message VerifyRequest {
    string Name = 1; // 姓名
    string Number = 2; // 身份证号码
    string UserIP = 3; // 用户的IP, 用于限速; UserIP 和 UserID 至少传一个
    int64 UserID = 4; // 用户的ID, 用于限速; UserIP 和 UserID 至少传一个
    string Scene = 5; // 认证的场景, 128 个字符以内

    string AppID = 11;
    reserved 12, 13, 14, 15;
    reserved "TimeStamp", "NonceStr", "SignType", "Sign";
}

enum VerifyResult {
    Unused = 0;
    Match = 1; // 姓名和身份证号码匹配
    Mismatch = 2; // 姓名和身份证号码不匹配
    NonstandardName = 3; // 不是标准的姓名
    NonstandardNumber = 4; // 不是标准的身份证号码
    NonexistentNumber = 5; // 没有找到此身份证号码
}

message VerifyReply {
    VerifyResult Result = 1; // 验证结果
    string Name = 2; // 经过修正的姓名
    string Number = 3; // 经过修正的身份证号码
    string IDInfoKey = 4; // 查询此身份证信息的 key

    string AppID = 11;
    reserved 12, 13, 14, 15;
    reserved "TimeStamp", "NonceStr", "SignType", "Sign";
}

message QueryIDInfoRequest {
    string Key = 1; // VerifyReply.IDInfoKey

    string AppID = 11;
    reserved 12, 13, 14, 15;
    reserved "TimeStamp", "NonceStr", "SignType", "Sign";
}

message QueryIDInfoReply {
    string Name = 1; // 姓名
    string Number = 2; // 身份证号码

    string AppID = 11;
    reserved 12, 13, 14, 15;
    reserved "TimeStamp", "NonceStr", "SignType", "Sign";
}